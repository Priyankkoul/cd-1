Terminals unused in grammar

   DIGITS
   SPECIAL
   SPACE
   KEYWORD
   SEMICOLON
   MOD
   SINGLEQUOTE
   DOUBLEQUOTE


Grammar

    0 $accept: P $end

    1 P: S

    2 S: Simple S
    3  | Compound S
    4  | comment S
    5  | INDENT Simple S
    6  | %empty

    7 Simple: Assignment LB
    8       | Print LB

    9 Assignment: ID opassgn E1
   10           | ID EQUAL E1
   11           | ID PLUSEQUAL E1
   12           | list
   13           | string
   14           | ID PLUS PLUS
   15           | ID MINUS MINUS

   16 opassgn: DIVIDEEQUAL
   17        | MULEQUAL
   18        | MINUSEQUAL

   19 list: ID EQUAL Arr
   20     | ID PLUSEQUAL Arr

   21 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END
   22    | LIST SPECIAL_START Range SPECIAL_END
   23    | SQUAREBRACKET_START list SQUAREBRACKET_END mul
   24    | SQUAREBRACKET_START list SQUAREBRACKET_END add

   25 mul: MUL INTEGER

   26 add: PLUS INTEGER

   27 list: listnum
   28     | liststr

   29 Range: RANGE SPECIAL_START start COMMA stop COMMA step SPECIAL_END
   30      | RANGE SPECIAL_START COMMA COMMA SPECIAL_END

   31 start: NUM
   32      | INTEGER

   33 stop: NUM
   34     | INTEGER

   35 step: NUM
   36     | INTEGER

   37 listnum: NUM COMMA listnum
   38        | INTEGER COMMA listnum
   39        | NUM
   40        | INTEGER

   41 liststr: Str COMMA liststr
   42        | Str

   43 Str: STRING
   44    | STRING mul
   45    | STRING addstr

   46 addstr: PLUS STRING

   47 string: ID EQUAL STRING
   48       | ID PLUSEQUAL STRING

   49 E1: E1 OP1 E2
   50   | E2

   51 E2: E2 OP2 E3
   52   | E3

   53 E3: E4 EXPONENTIAL E3
   54   | E4

   55 E4: NUM
   56   | INTEGER
   57   | ID
   58   | SPECIAL_START E1 SPECIAL_END

   59 OP1: PLUS
   60    | MINUS

   61 OP2: MUL
   62    | DIVIDE

   63 Compound: if_else LB
   64         | only_if LB
   65         | while_loop LB

   66 if_else: IF condition COLON LB IND else_1

   67 only_if: IF condition COLON LB IND

   68 else_1: ELSE COLON LB IND

   69 while_loop: WHILE condition COLON LB IND

   70 condition: cond

   71 cond: cond opor cond1
   72     | cond1

   73 cond1: cond1 opand cond2
   74      | cond2

   75 cond2: opnot cond2
   76      | cond3

   77 cond3: SPECIAL_START cond SPECIAL_END
   78      | relexp
   79      | bool

   80 relexp: relexp relop E1
   81       | ID
   82       | NUM
   83       | INTEGER

   84 relop: comparison
   85      | IN
   86      | NOTIN

   87 comparison: LESSTHAN
   88           | LESSTHANEQUAL
   89           | GREATERTHAN
   90           | GREATERTHANEQUAL
   91           | DOUBLEEQUAL
   92           | NOTEQUAL

   93 bool: T
   94     | F

   95 opor: OR

   96 opand: AND

   97 opnot: NOT

   98 IND: INDENT A S

   99 A: %empty

  100 Print: PRINT SPECIAL_START toprint SPECIAL_END
  101      | PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  102      | PRINT SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END
  103      | PRINT SPECIAL_START toprint END EQUAL STRING SPECIAL_END

  104 toprint: X
  105        | X COMMA toprint

  106 X: STRING
  107  | Arr
  108  | ID
  109  | NUM
  110  | INTEGER

  111 comment: COMMENT

  112 LB: NL


Terminals, with rules where they appear

$end (0) 0
error (256)
DIGITS (258)
ID (259) 9 10 11 14 15 19 20 47 48 57 81 108
PLUS (260) 14 26 46 59
MINUS (261) 15 60
MUL (262) 25 61
DIVIDE (263) 62
NUM (264) 31 33 35 37 39 55 82 109
STRING (265) 43 44 45 46 47 48 101 102 103 106
INTEGER (266) 25 26 32 34 36 38 40 56 83 110
SPECIAL (267)
NL (268) 112
SPACE (269)
KEYWORD (270)
SPECIAL_START (271) 22 29 30 58 77 100 101 102 103
SPECIAL_END (272) 22 29 30 58 77 100 101 102 103
IF (273) 66 67
ELSE (274) 68
WHILE (275) 69
SEP (276) 101 102
END (277) 101 103
OR (278) 95
AND (279) 96
NOT (280) 97
IN (281) 85
NOTIN (282) 86
T (283) 93
F (284) 94
COLON (285) 66 67 68 69
SEMICOLON (286)
SQUAREBRACKET_START (287) 21 23 24
SQUAREBRACKET_END (288) 21 23 24
MOD (289)
EQUAL (290) 10 19 47 101 102 103
PLUSEQUAL (291) 11 20 48
PRINT (292) 100 101 102 103
COMMENT (293) 111
RANGE (294) 29 30
SINGLEQUOTE (295)
DOUBLEQUOTE (296)
EXPONENTIAL (297) 53
COMMA (298) 29 30 37 38 41 105
INDENT (299) 5 98
LIST (300) 22
DIVIDEEQUAL (301) 16
MINUSEQUAL (302) 18
MULEQUAL (303) 17
LESSTHAN (304) 87
LESSTHANEQUAL (305) 88
GREATERTHAN (306) 89
GREATERTHANEQUAL (307) 90
DOUBLEEQUAL (308) 91
NOTEQUAL (309) 92


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
P (56)
    on left: 1, on right: 0
S (57)
    on left: 2 3 4 5 6, on right: 1 2 3 4 5 98
Simple (58)
    on left: 7 8, on right: 2 5
Assignment (59)
    on left: 9 10 11 12 13 14 15, on right: 7
opassgn (60)
    on left: 16 17 18, on right: 9
list (61)
    on left: 19 20 27 28, on right: 12 21 23 24
Arr (62)
    on left: 21 22 23 24, on right: 19 20 107
mul (63)
    on left: 25, on right: 23 44
add (64)
    on left: 26, on right: 24
Range (65)
    on left: 29 30, on right: 22
start (66)
    on left: 31 32, on right: 29
stop (67)
    on left: 33 34, on right: 29
step (68)
    on left: 35 36, on right: 29
listnum (69)
    on left: 37 38 39 40, on right: 27 37 38
liststr (70)
    on left: 41 42, on right: 28 41
Str (71)
    on left: 43 44 45, on right: 41 42
addstr (72)
    on left: 46, on right: 45
string (73)
    on left: 47 48, on right: 13
E1 (74)
    on left: 49 50, on right: 9 10 11 49 58 80
E2 (75)
    on left: 51 52, on right: 49 50 51
E3 (76)
    on left: 53 54, on right: 51 52 53
E4 (77)
    on left: 55 56 57 58, on right: 53 54
OP1 (78)
    on left: 59 60, on right: 49
OP2 (79)
    on left: 61 62, on right: 51
Compound (80)
    on left: 63 64 65, on right: 3
if_else (81)
    on left: 66, on right: 63
only_if (82)
    on left: 67, on right: 64
else_1 (83)
    on left: 68, on right: 66
while_loop (84)
    on left: 69, on right: 65
condition (85)
    on left: 70, on right: 66 67 69
cond (86)
    on left: 71 72, on right: 70 71 77
cond1 (87)
    on left: 73 74, on right: 71 72 73
cond2 (88)
    on left: 75 76, on right: 73 74 75
cond3 (89)
    on left: 77 78 79, on right: 76
relexp (90)
    on left: 80 81 82 83, on right: 78 80
relop (91)
    on left: 84 85 86, on right: 80
comparison (92)
    on left: 87 88 89 90 91 92, on right: 84
bool (93)
    on left: 93 94, on right: 79
opor (94)
    on left: 95, on right: 71
opand (95)
    on left: 96, on right: 73
opnot (96)
    on left: 97, on right: 75
IND (97)
    on left: 98, on right: 66 67 68 69
A (98)
    on left: 99, on right: 98
Print (99)
    on left: 100 101 102 103, on right: 8
toprint (100)
    on left: 104 105, on right: 100 101 102 103 105
X (101)
    on left: 106 107 108 109 110, on right: 104 105
comment (102)
    on left: 111, on right: 4
LB (103)
    on left: 112, on right: 7 8 63 64 65 66 67 68 69


State 0

    0 $accept: . P $end

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    P           go to state 10
    S           go to state 11
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 1

    9 Assignment: ID . opassgn E1
   10           | ID . EQUAL E1
   11           | ID . PLUSEQUAL E1
   14           | ID . PLUS PLUS
   15           | ID . MINUS MINUS
   19 list: ID . EQUAL Arr
   20     | ID . PLUSEQUAL Arr
   47 string: ID . EQUAL STRING
   48       | ID . PLUSEQUAL STRING

    PLUS         shift, and go to state 25
    MINUS        shift, and go to state 26
    EQUAL        shift, and go to state 27
    PLUSEQUAL    shift, and go to state 28
    DIVIDEEQUAL  shift, and go to state 29
    MINUSEQUAL   shift, and go to state 30
    MULEQUAL     shift, and go to state 31

    opassgn  go to state 32


State 2

   37 listnum: NUM . COMMA listnum
   39        | NUM .

    COMMA  shift, and go to state 33

    $default  reduce using rule 39 (listnum)


State 3

   43 Str: STRING .
   44    | STRING . mul
   45    | STRING . addstr

    PLUS  shift, and go to state 34
    MUL   shift, and go to state 35

    $default  reduce using rule 43 (Str)

    mul     go to state 36
    addstr  go to state 37


State 4

   38 listnum: INTEGER . COMMA listnum
   40        | INTEGER .

    COMMA  shift, and go to state 38

    $default  reduce using rule 40 (listnum)


State 5

   66 if_else: IF . condition COLON LB IND else_1
   67 only_if: IF . condition COLON LB IND

    ID             shift, and go to state 39
    NUM            shift, and go to state 40
    INTEGER        shift, and go to state 41
    SPECIAL_START  shift, and go to state 42
    NOT            shift, and go to state 43
    T              shift, and go to state 44
    F              shift, and go to state 45

    condition  go to state 46
    cond       go to state 47
    cond1      go to state 48
    cond2      go to state 49
    cond3      go to state 50
    relexp     go to state 51
    bool       go to state 52
    opnot      go to state 53


State 6

   69 while_loop: WHILE . condition COLON LB IND

    ID             shift, and go to state 39
    NUM            shift, and go to state 40
    INTEGER        shift, and go to state 41
    SPECIAL_START  shift, and go to state 42
    NOT            shift, and go to state 43
    T              shift, and go to state 44
    F              shift, and go to state 45

    condition  go to state 54
    cond       go to state 47
    cond1      go to state 48
    cond2      go to state 49
    cond3      go to state 50
    relexp     go to state 51
    bool       go to state 52
    opnot      go to state 53


State 7

  100 Print: PRINT . SPECIAL_START toprint SPECIAL_END
  101      | PRINT . SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  102      | PRINT . SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END
  103      | PRINT . SPECIAL_START toprint END EQUAL STRING SPECIAL_END

    SPECIAL_START  shift, and go to state 55


State 8

  111 comment: COMMENT .

    $default  reduce using rule 111 (comment)


State 9

    5 S: INDENT . Simple S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    PRINT    shift, and go to state 7

    Simple      go to state 56
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Print       go to state 23


State 10

    0 $accept: P . $end

    $end  shift, and go to state 57


State 11

    1 P: S .

    $default  reduce using rule 1 (P)


State 12

    2 S: Simple . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 58
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 13

    7 Simple: Assignment . LB

    NL  shift, and go to state 59

    LB  go to state 60


State 14

   12 Assignment: list .

    $default  reduce using rule 12 (Assignment)


State 15

   27 list: listnum .

    $default  reduce using rule 27 (list)


State 16

   28 list: liststr .

    $default  reduce using rule 28 (list)


State 17

   41 liststr: Str . COMMA liststr
   42        | Str .

    COMMA  shift, and go to state 61

    $default  reduce using rule 42 (liststr)


State 18

   13 Assignment: string .

    $default  reduce using rule 13 (Assignment)


State 19

    3 S: Compound . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 62
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 20

   63 Compound: if_else . LB

    NL  shift, and go to state 59

    LB  go to state 63


State 21

   64 Compound: only_if . LB

    NL  shift, and go to state 59

    LB  go to state 64


State 22

   65 Compound: while_loop . LB

    NL  shift, and go to state 59

    LB  go to state 65


State 23

    8 Simple: Print . LB

    NL  shift, and go to state 59

    LB  go to state 66


State 24

    4 S: comment . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 67
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 25

   14 Assignment: ID PLUS . PLUS

    PLUS  shift, and go to state 68


State 26

   15 Assignment: ID MINUS . MINUS

    MINUS  shift, and go to state 69


State 27

   10 Assignment: ID EQUAL . E1
   19 list: ID EQUAL . Arr
   47 string: ID EQUAL . STRING

    ID                   shift, and go to state 70
    NUM                  shift, and go to state 71
    STRING               shift, and go to state 72
    INTEGER              shift, and go to state 73
    SPECIAL_START        shift, and go to state 74
    SQUAREBRACKET_START  shift, and go to state 75
    LIST                 shift, and go to state 76

    Arr  go to state 77
    E1   go to state 78
    E2   go to state 79
    E3   go to state 80
    E4   go to state 81


State 28

   11 Assignment: ID PLUSEQUAL . E1
   20 list: ID PLUSEQUAL . Arr
   48 string: ID PLUSEQUAL . STRING

    ID                   shift, and go to state 70
    NUM                  shift, and go to state 71
    STRING               shift, and go to state 82
    INTEGER              shift, and go to state 73
    SPECIAL_START        shift, and go to state 74
    SQUAREBRACKET_START  shift, and go to state 75
    LIST                 shift, and go to state 76

    Arr  go to state 83
    E1   go to state 84
    E2   go to state 79
    E3   go to state 80
    E4   go to state 81


State 29

   16 opassgn: DIVIDEEQUAL .

    $default  reduce using rule 16 (opassgn)


State 30

   18 opassgn: MINUSEQUAL .

    $default  reduce using rule 18 (opassgn)


State 31

   17 opassgn: MULEQUAL .

    $default  reduce using rule 17 (opassgn)


State 32

    9 Assignment: ID opassgn . E1

    ID             shift, and go to state 70
    NUM            shift, and go to state 71
    INTEGER        shift, and go to state 73
    SPECIAL_START  shift, and go to state 74

    E1  go to state 85
    E2  go to state 79
    E3  go to state 80
    E4  go to state 81


State 33

   37 listnum: NUM COMMA . listnum

    NUM      shift, and go to state 2
    INTEGER  shift, and go to state 4

    listnum  go to state 86


State 34

   46 addstr: PLUS . STRING

    STRING  shift, and go to state 87


State 35

   25 mul: MUL . INTEGER

    INTEGER  shift, and go to state 88


State 36

   44 Str: STRING mul .

    $default  reduce using rule 44 (Str)


State 37

   45 Str: STRING addstr .

    $default  reduce using rule 45 (Str)


State 38

   38 listnum: INTEGER COMMA . listnum

    NUM      shift, and go to state 2
    INTEGER  shift, and go to state 4

    listnum  go to state 89


State 39

   81 relexp: ID .

    $default  reduce using rule 81 (relexp)


State 40

   82 relexp: NUM .

    $default  reduce using rule 82 (relexp)


State 41

   83 relexp: INTEGER .

    $default  reduce using rule 83 (relexp)


State 42

   77 cond3: SPECIAL_START . cond SPECIAL_END

    ID             shift, and go to state 39
    NUM            shift, and go to state 40
    INTEGER        shift, and go to state 41
    SPECIAL_START  shift, and go to state 42
    NOT            shift, and go to state 43
    T              shift, and go to state 44
    F              shift, and go to state 45

    cond    go to state 90
    cond1   go to state 48
    cond2   go to state 49
    cond3   go to state 50
    relexp  go to state 51
    bool    go to state 52
    opnot   go to state 53


State 43

   97 opnot: NOT .

    $default  reduce using rule 97 (opnot)


State 44

   93 bool: T .

    $default  reduce using rule 93 (bool)


State 45

   94 bool: F .

    $default  reduce using rule 94 (bool)


State 46

   66 if_else: IF condition . COLON LB IND else_1
   67 only_if: IF condition . COLON LB IND

    COLON  shift, and go to state 91


State 47

   70 condition: cond .
   71 cond: cond . opor cond1

    OR  shift, and go to state 92

    $default  reduce using rule 70 (condition)

    opor  go to state 93


State 48

   72 cond: cond1 .
   73 cond1: cond1 . opand cond2

    AND  shift, and go to state 94

    $default  reduce using rule 72 (cond)

    opand  go to state 95


State 49

   74 cond1: cond2 .

    $default  reduce using rule 74 (cond1)


State 50

   76 cond2: cond3 .

    $default  reduce using rule 76 (cond2)


State 51

   78 cond3: relexp .
   80 relexp: relexp . relop E1

    IN                shift, and go to state 96
    NOTIN             shift, and go to state 97
    LESSTHAN          shift, and go to state 98
    LESSTHANEQUAL     shift, and go to state 99
    GREATERTHAN       shift, and go to state 100
    GREATERTHANEQUAL  shift, and go to state 101
    DOUBLEEQUAL       shift, and go to state 102
    NOTEQUAL          shift, and go to state 103

    $default  reduce using rule 78 (cond3)

    relop       go to state 104
    comparison  go to state 105


State 52

   79 cond3: bool .

    $default  reduce using rule 79 (cond3)


State 53

   75 cond2: opnot . cond2

    ID             shift, and go to state 39
    NUM            shift, and go to state 40
    INTEGER        shift, and go to state 41
    SPECIAL_START  shift, and go to state 42
    NOT            shift, and go to state 43
    T              shift, and go to state 44
    F              shift, and go to state 45

    cond2   go to state 106
    cond3   go to state 50
    relexp  go to state 51
    bool    go to state 52
    opnot   go to state 53


State 54

   69 while_loop: WHILE condition . COLON LB IND

    COLON  shift, and go to state 107


State 55

  100 Print: PRINT SPECIAL_START . toprint SPECIAL_END
  101      | PRINT SPECIAL_START . toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  102      | PRINT SPECIAL_START . toprint SEP EQUAL STRING SPECIAL_END
  103      | PRINT SPECIAL_START . toprint END EQUAL STRING SPECIAL_END

    ID                   shift, and go to state 108
    NUM                  shift, and go to state 109
    STRING               shift, and go to state 110
    INTEGER              shift, and go to state 111
    SQUAREBRACKET_START  shift, and go to state 75
    LIST                 shift, and go to state 76

    Arr      go to state 112
    toprint  go to state 113
    X        go to state 114


State 56

    5 S: INDENT Simple . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 115
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 57

    0 $accept: P $end .

    $default  accept


State 58

    2 S: Simple S .

    $default  reduce using rule 2 (S)


State 59

  112 LB: NL .

    $default  reduce using rule 112 (LB)


State 60

    7 Simple: Assignment LB .

    $default  reduce using rule 7 (Simple)


State 61

   41 liststr: Str COMMA . liststr

    STRING  shift, and go to state 3

    liststr  go to state 116
    Str      go to state 17


State 62

    3 S: Compound S .

    $default  reduce using rule 3 (S)


State 63

   63 Compound: if_else LB .

    $default  reduce using rule 63 (Compound)


State 64

   64 Compound: only_if LB .

    $default  reduce using rule 64 (Compound)


State 65

   65 Compound: while_loop LB .

    $default  reduce using rule 65 (Compound)


State 66

    8 Simple: Print LB .

    $default  reduce using rule 8 (Simple)


State 67

    4 S: comment S .

    $default  reduce using rule 4 (S)


State 68

   14 Assignment: ID PLUS PLUS .

    $default  reduce using rule 14 (Assignment)


State 69

   15 Assignment: ID MINUS MINUS .

    $default  reduce using rule 15 (Assignment)


State 70

   57 E4: ID .

    $default  reduce using rule 57 (E4)


State 71

   55 E4: NUM .

    $default  reduce using rule 55 (E4)


State 72

   47 string: ID EQUAL STRING .

    $default  reduce using rule 47 (string)


State 73

   56 E4: INTEGER .

    $default  reduce using rule 56 (E4)


State 74

   58 E4: SPECIAL_START . E1 SPECIAL_END

    ID             shift, and go to state 70
    NUM            shift, and go to state 71
    INTEGER        shift, and go to state 73
    SPECIAL_START  shift, and go to state 74

    E1  go to state 117
    E2  go to state 79
    E3  go to state 80
    E4  go to state 81


State 75

   21 Arr: SQUAREBRACKET_START . list SQUAREBRACKET_END
   23    | SQUAREBRACKET_START . list SQUAREBRACKET_END mul
   24    | SQUAREBRACKET_START . list SQUAREBRACKET_END add

    ID       shift, and go to state 118
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4

    list     go to state 119
    listnum  go to state 15
    liststr  go to state 16
    Str      go to state 17


State 76

   22 Arr: LIST . SPECIAL_START Range SPECIAL_END

    SPECIAL_START  shift, and go to state 120


State 77

   19 list: ID EQUAL Arr .

    $default  reduce using rule 19 (list)


State 78

   10 Assignment: ID EQUAL E1 .
   49 E1: E1 . OP1 E2

    PLUS   shift, and go to state 121
    MINUS  shift, and go to state 122

    $default  reduce using rule 10 (Assignment)

    OP1  go to state 123


State 79

   50 E1: E2 .
   51 E2: E2 . OP2 E3

    MUL     shift, and go to state 124
    DIVIDE  shift, and go to state 125

    $default  reduce using rule 50 (E1)

    OP2  go to state 126


State 80

   52 E2: E3 .

    $default  reduce using rule 52 (E2)


State 81

   53 E3: E4 . EXPONENTIAL E3
   54   | E4 .

    EXPONENTIAL  shift, and go to state 127

    $default  reduce using rule 54 (E3)


State 82

   48 string: ID PLUSEQUAL STRING .

    $default  reduce using rule 48 (string)


State 83

   20 list: ID PLUSEQUAL Arr .

    $default  reduce using rule 20 (list)


State 84

   11 Assignment: ID PLUSEQUAL E1 .
   49 E1: E1 . OP1 E2

    PLUS   shift, and go to state 121
    MINUS  shift, and go to state 122

    $default  reduce using rule 11 (Assignment)

    OP1  go to state 123


State 85

    9 Assignment: ID opassgn E1 .
   49 E1: E1 . OP1 E2

    PLUS   shift, and go to state 121
    MINUS  shift, and go to state 122

    $default  reduce using rule 9 (Assignment)

    OP1  go to state 123


State 86

   37 listnum: NUM COMMA listnum .

    $default  reduce using rule 37 (listnum)


State 87

   46 addstr: PLUS STRING .

    $default  reduce using rule 46 (addstr)


State 88

   25 mul: MUL INTEGER .

    $default  reduce using rule 25 (mul)


State 89

   38 listnum: INTEGER COMMA listnum .

    $default  reduce using rule 38 (listnum)


State 90

   71 cond: cond . opor cond1
   77 cond3: SPECIAL_START cond . SPECIAL_END

    SPECIAL_END  shift, and go to state 128
    OR           shift, and go to state 92

    opor  go to state 93


State 91

   66 if_else: IF condition COLON . LB IND else_1
   67 only_if: IF condition COLON . LB IND

    NL  shift, and go to state 59

    LB  go to state 129


State 92

   95 opor: OR .

    $default  reduce using rule 95 (opor)


State 93

   71 cond: cond opor . cond1

    ID             shift, and go to state 39
    NUM            shift, and go to state 40
    INTEGER        shift, and go to state 41
    SPECIAL_START  shift, and go to state 42
    NOT            shift, and go to state 43
    T              shift, and go to state 44
    F              shift, and go to state 45

    cond1   go to state 130
    cond2   go to state 49
    cond3   go to state 50
    relexp  go to state 51
    bool    go to state 52
    opnot   go to state 53


State 94

   96 opand: AND .

    $default  reduce using rule 96 (opand)


State 95

   73 cond1: cond1 opand . cond2

    ID             shift, and go to state 39
    NUM            shift, and go to state 40
    INTEGER        shift, and go to state 41
    SPECIAL_START  shift, and go to state 42
    NOT            shift, and go to state 43
    T              shift, and go to state 44
    F              shift, and go to state 45

    cond2   go to state 131
    cond3   go to state 50
    relexp  go to state 51
    bool    go to state 52
    opnot   go to state 53


State 96

   85 relop: IN .

    $default  reduce using rule 85 (relop)


State 97

   86 relop: NOTIN .

    $default  reduce using rule 86 (relop)


State 98

   87 comparison: LESSTHAN .

    $default  reduce using rule 87 (comparison)


State 99

   88 comparison: LESSTHANEQUAL .

    $default  reduce using rule 88 (comparison)


State 100

   89 comparison: GREATERTHAN .

    $default  reduce using rule 89 (comparison)


State 101

   90 comparison: GREATERTHANEQUAL .

    $default  reduce using rule 90 (comparison)


State 102

   91 comparison: DOUBLEEQUAL .

    $default  reduce using rule 91 (comparison)


State 103

   92 comparison: NOTEQUAL .

    $default  reduce using rule 92 (comparison)


State 104

   80 relexp: relexp relop . E1

    ID             shift, and go to state 70
    NUM            shift, and go to state 71
    INTEGER        shift, and go to state 73
    SPECIAL_START  shift, and go to state 74

    E1  go to state 132
    E2  go to state 79
    E3  go to state 80
    E4  go to state 81


State 105

   84 relop: comparison .

    $default  reduce using rule 84 (relop)


State 106

   75 cond2: opnot cond2 .

    $default  reduce using rule 75 (cond2)


State 107

   69 while_loop: WHILE condition COLON . LB IND

    NL  shift, and go to state 59

    LB  go to state 133


State 108

  108 X: ID .

    $default  reduce using rule 108 (X)


State 109

  109 X: NUM .

    $default  reduce using rule 109 (X)


State 110

  106 X: STRING .

    $default  reduce using rule 106 (X)


State 111

  110 X: INTEGER .

    $default  reduce using rule 110 (X)


State 112

  107 X: Arr .

    $default  reduce using rule 107 (X)


State 113

  100 Print: PRINT SPECIAL_START toprint . SPECIAL_END
  101      | PRINT SPECIAL_START toprint . SEP EQUAL STRING END EQUAL STRING SPECIAL_END
  102      | PRINT SPECIAL_START toprint . SEP EQUAL STRING SPECIAL_END
  103      | PRINT SPECIAL_START toprint . END EQUAL STRING SPECIAL_END

    SPECIAL_END  shift, and go to state 134
    SEP          shift, and go to state 135
    END          shift, and go to state 136


State 114

  104 toprint: X .
  105        | X . COMMA toprint

    COMMA  shift, and go to state 137

    $default  reduce using rule 104 (toprint)


State 115

    5 S: INDENT Simple S .

    $default  reduce using rule 5 (S)


State 116

   41 liststr: Str COMMA liststr .

    $default  reduce using rule 41 (liststr)


State 117

   49 E1: E1 . OP1 E2
   58 E4: SPECIAL_START E1 . SPECIAL_END

    PLUS         shift, and go to state 121
    MINUS        shift, and go to state 122
    SPECIAL_END  shift, and go to state 138

    OP1  go to state 123


State 118

   19 list: ID . EQUAL Arr
   20     | ID . PLUSEQUAL Arr

    EQUAL      shift, and go to state 139
    PLUSEQUAL  shift, and go to state 140


State 119

   21 Arr: SQUAREBRACKET_START list . SQUAREBRACKET_END
   23    | SQUAREBRACKET_START list . SQUAREBRACKET_END mul
   24    | SQUAREBRACKET_START list . SQUAREBRACKET_END add

    SQUAREBRACKET_END  shift, and go to state 141


State 120

   22 Arr: LIST SPECIAL_START . Range SPECIAL_END

    RANGE  shift, and go to state 142

    Range  go to state 143


State 121

   59 OP1: PLUS .

    $default  reduce using rule 59 (OP1)


State 122

   60 OP1: MINUS .

    $default  reduce using rule 60 (OP1)


State 123

   49 E1: E1 OP1 . E2

    ID             shift, and go to state 70
    NUM            shift, and go to state 71
    INTEGER        shift, and go to state 73
    SPECIAL_START  shift, and go to state 74

    E2  go to state 144
    E3  go to state 80
    E4  go to state 81


State 124

   61 OP2: MUL .

    $default  reduce using rule 61 (OP2)


State 125

   62 OP2: DIVIDE .

    $default  reduce using rule 62 (OP2)


State 126

   51 E2: E2 OP2 . E3

    ID             shift, and go to state 70
    NUM            shift, and go to state 71
    INTEGER        shift, and go to state 73
    SPECIAL_START  shift, and go to state 74

    E3  go to state 145
    E4  go to state 81


State 127

   53 E3: E4 EXPONENTIAL . E3

    ID             shift, and go to state 70
    NUM            shift, and go to state 71
    INTEGER        shift, and go to state 73
    SPECIAL_START  shift, and go to state 74

    E3  go to state 146
    E4  go to state 81


State 128

   77 cond3: SPECIAL_START cond SPECIAL_END .

    $default  reduce using rule 77 (cond3)


State 129

   66 if_else: IF condition COLON LB . IND else_1
   67 only_if: IF condition COLON LB . IND

    INDENT  shift, and go to state 147

    IND  go to state 148


State 130

   71 cond: cond opor cond1 .
   73 cond1: cond1 . opand cond2

    AND  shift, and go to state 94

    $default  reduce using rule 71 (cond)

    opand  go to state 95


State 131

   73 cond1: cond1 opand cond2 .

    $default  reduce using rule 73 (cond1)


State 132

   49 E1: E1 . OP1 E2
   80 relexp: relexp relop E1 .

    PLUS   shift, and go to state 121
    MINUS  shift, and go to state 122

    $default  reduce using rule 80 (relexp)

    OP1  go to state 123


State 133

   69 while_loop: WHILE condition COLON LB . IND

    INDENT  shift, and go to state 147

    IND  go to state 149


State 134

  100 Print: PRINT SPECIAL_START toprint SPECIAL_END .

    $default  reduce using rule 100 (Print)


State 135

  101 Print: PRINT SPECIAL_START toprint SEP . EQUAL STRING END EQUAL STRING SPECIAL_END
  102      | PRINT SPECIAL_START toprint SEP . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 150


State 136

  103 Print: PRINT SPECIAL_START toprint END . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 151


State 137

  105 toprint: X COMMA . toprint

    ID                   shift, and go to state 108
    NUM                  shift, and go to state 109
    STRING               shift, and go to state 110
    INTEGER              shift, and go to state 111
    SQUAREBRACKET_START  shift, and go to state 75
    LIST                 shift, and go to state 76

    Arr      go to state 112
    toprint  go to state 152
    X        go to state 114


State 138

   58 E4: SPECIAL_START E1 SPECIAL_END .

    $default  reduce using rule 58 (E4)


State 139

   19 list: ID EQUAL . Arr

    SQUAREBRACKET_START  shift, and go to state 75
    LIST                 shift, and go to state 76

    Arr  go to state 77


State 140

   20 list: ID PLUSEQUAL . Arr

    SQUAREBRACKET_START  shift, and go to state 75
    LIST                 shift, and go to state 76

    Arr  go to state 83


State 141

   21 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END .
   23    | SQUAREBRACKET_START list SQUAREBRACKET_END . mul
   24    | SQUAREBRACKET_START list SQUAREBRACKET_END . add

    PLUS  shift, and go to state 153
    MUL   shift, and go to state 35

    $default  reduce using rule 21 (Arr)

    mul  go to state 154
    add  go to state 155


State 142

   29 Range: RANGE . SPECIAL_START start COMMA stop COMMA step SPECIAL_END
   30      | RANGE . SPECIAL_START COMMA COMMA SPECIAL_END

    SPECIAL_START  shift, and go to state 156


State 143

   22 Arr: LIST SPECIAL_START Range . SPECIAL_END

    SPECIAL_END  shift, and go to state 157


State 144

   49 E1: E1 OP1 E2 .
   51 E2: E2 . OP2 E3

    MUL     shift, and go to state 124
    DIVIDE  shift, and go to state 125

    $default  reduce using rule 49 (E1)

    OP2  go to state 126


State 145

   51 E2: E2 OP2 E3 .

    $default  reduce using rule 51 (E2)


State 146

   53 E3: E4 EXPONENTIAL E3 .

    $default  reduce using rule 53 (E3)


State 147

   98 IND: INDENT . A S

    $default  reduce using rule 99 (A)

    A  go to state 158


State 148

   66 if_else: IF condition COLON LB IND . else_1
   67 only_if: IF condition COLON LB IND .

    ELSE  shift, and go to state 159

    $default  reduce using rule 67 (only_if)

    else_1  go to state 160


State 149

   69 while_loop: WHILE condition COLON LB IND .

    $default  reduce using rule 69 (while_loop)


State 150

  101 Print: PRINT SPECIAL_START toprint SEP EQUAL . STRING END EQUAL STRING SPECIAL_END
  102      | PRINT SPECIAL_START toprint SEP EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 161


State 151

  103 Print: PRINT SPECIAL_START toprint END EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 162


State 152

  105 toprint: X COMMA toprint .

    $default  reduce using rule 105 (toprint)


State 153

   26 add: PLUS . INTEGER

    INTEGER  shift, and go to state 163


State 154

   23 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END mul .

    $default  reduce using rule 23 (Arr)


State 155

   24 Arr: SQUAREBRACKET_START list SQUAREBRACKET_END add .

    $default  reduce using rule 24 (Arr)


State 156

   29 Range: RANGE SPECIAL_START . start COMMA stop COMMA step SPECIAL_END
   30      | RANGE SPECIAL_START . COMMA COMMA SPECIAL_END

    NUM      shift, and go to state 164
    INTEGER  shift, and go to state 165
    COMMA    shift, and go to state 166

    start  go to state 167


State 157

   22 Arr: LIST SPECIAL_START Range SPECIAL_END .

    $default  reduce using rule 22 (Arr)


State 158

   98 IND: INDENT A . S

    ID       shift, and go to state 1
    NUM      shift, and go to state 2
    STRING   shift, and go to state 3
    INTEGER  shift, and go to state 4
    IF       shift, and go to state 5
    WHILE    shift, and go to state 6
    PRINT    shift, and go to state 7
    COMMENT  shift, and go to state 8
    INDENT   shift, and go to state 9

    $default  reduce using rule 6 (S)

    S           go to state 168
    Simple      go to state 12
    Assignment  go to state 13
    list        go to state 14
    listnum     go to state 15
    liststr     go to state 16
    Str         go to state 17
    string      go to state 18
    Compound    go to state 19
    if_else     go to state 20
    only_if     go to state 21
    while_loop  go to state 22
    Print       go to state 23
    comment     go to state 24


State 159

   68 else_1: ELSE . COLON LB IND

    COLON  shift, and go to state 169


State 160

   66 if_else: IF condition COLON LB IND else_1 .

    $default  reduce using rule 66 (if_else)


State 161

  101 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING . END EQUAL STRING SPECIAL_END
  102      | PRINT SPECIAL_START toprint SEP EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 170
    END          shift, and go to state 171


State 162

  103 Print: PRINT SPECIAL_START toprint END EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 172


State 163

   26 add: PLUS INTEGER .

    $default  reduce using rule 26 (add)


State 164

   31 start: NUM .

    $default  reduce using rule 31 (start)


State 165

   32 start: INTEGER .

    $default  reduce using rule 32 (start)


State 166

   30 Range: RANGE SPECIAL_START COMMA . COMMA SPECIAL_END

    COMMA  shift, and go to state 173


State 167

   29 Range: RANGE SPECIAL_START start . COMMA stop COMMA step SPECIAL_END

    COMMA  shift, and go to state 174


State 168

   98 IND: INDENT A S .

    $default  reduce using rule 98 (IND)


State 169

   68 else_1: ELSE COLON . LB IND

    NL  shift, and go to state 59

    LB  go to state 175


State 170

  102 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING SPECIAL_END .

    $default  reduce using rule 102 (Print)


State 171

  101 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END . EQUAL STRING SPECIAL_END

    EQUAL  shift, and go to state 176


State 172

  103 Print: PRINT SPECIAL_START toprint END EQUAL STRING SPECIAL_END .

    $default  reduce using rule 103 (Print)


State 173

   30 Range: RANGE SPECIAL_START COMMA COMMA . SPECIAL_END

    SPECIAL_END  shift, and go to state 177


State 174

   29 Range: RANGE SPECIAL_START start COMMA . stop COMMA step SPECIAL_END

    NUM      shift, and go to state 178
    INTEGER  shift, and go to state 179

    stop  go to state 180


State 175

   68 else_1: ELSE COLON LB . IND

    INDENT  shift, and go to state 147

    IND  go to state 181


State 176

  101 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL . STRING SPECIAL_END

    STRING  shift, and go to state 182


State 177

   30 Range: RANGE SPECIAL_START COMMA COMMA SPECIAL_END .

    $default  reduce using rule 30 (Range)


State 178

   33 stop: NUM .

    $default  reduce using rule 33 (stop)


State 179

   34 stop: INTEGER .

    $default  reduce using rule 34 (stop)


State 180

   29 Range: RANGE SPECIAL_START start COMMA stop . COMMA step SPECIAL_END

    COMMA  shift, and go to state 183


State 181

   68 else_1: ELSE COLON LB IND .

    $default  reduce using rule 68 (else_1)


State 182

  101 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING . SPECIAL_END

    SPECIAL_END  shift, and go to state 184


State 183

   29 Range: RANGE SPECIAL_START start COMMA stop COMMA . step SPECIAL_END

    NUM      shift, and go to state 185
    INTEGER  shift, and go to state 186

    step  go to state 187


State 184

  101 Print: PRINT SPECIAL_START toprint SEP EQUAL STRING END EQUAL STRING SPECIAL_END .

    $default  reduce using rule 101 (Print)


State 185

   35 step: NUM .

    $default  reduce using rule 35 (step)


State 186

   36 step: INTEGER .

    $default  reduce using rule 36 (step)


State 187

   29 Range: RANGE SPECIAL_START start COMMA stop COMMA step . SPECIAL_END

    SPECIAL_END  shift, and go to state 188


State 188

   29 Range: RANGE SPECIAL_START start COMMA stop COMMA step SPECIAL_END .

    $default  reduce using rule 29 (Range)
